==21480== Memcheck, a memory error detector
==21480== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==21480== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==21480== Command: ./tests/scripts/valgrindtest ./main ./tests/e2/input/certa03.txt
==21480== Parent PID: 2706
==21480== 
--21480-- 
--21480-- Valgrind options:
--21480--    --tool=memcheck
--21480--    --log-file=valgrind.log
--21480--    --leak-check=full
--21480--    -v
--21480-- Contents of /proc/version:
--21480--   Linux version 3.13.0-24-generic (buildd@batsu) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #47-Ubuntu SMP Fri May 2 23:30:00 UTC 2014
--21480-- Arch and hwcaps: AMD64, amd64-cx16-rdtscp-sse3-avx
--21480-- Page sizes: currently 4096, max supported 4096
--21480-- Valgrind library directory: /usr/lib/valgrind
--21480-- Reading syms from /bin/bash
--21480--   Considering /bin/bash ..
--21480--   .. CRC mismatch (computed 594e4450 wanted 0d1272a8)
--21480--    object doesn't have a symbol table
--21480-- Reading syms from /lib/x86_64-linux-gnu/ld-2.19.so
--21480--   Considering /lib/x86_64-linux-gnu/ld-2.19.so ..
--21480--   .. CRC mismatch (computed 4cbae35e wanted 8d683c31)
--21480--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/ld-2.19.so ..
--21480--   .. CRC is valid
--21480-- Reading syms from /usr/lib/valgrind/memcheck-amd64-linux
--21480--   Considering /usr/lib/valgrind/memcheck-amd64-linux ..
--21480--   .. CRC mismatch (computed 37cdde19 wanted adc367dd)
--21480--    object doesn't have a symbol table
--21480--    object doesn't have a dynamic symbol table
--21480-- Scheduler: using generic scheduler lock implementation.
--21480-- Reading suppressions file: /usr/lib/valgrind/default.supp
==21480== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21480-by-mandiow-on-???
==21480== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21480-by-mandiow-on-???
==21480== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21480-by-mandiow-on-???
==21480== 
==21480== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21480== don't want to do, unless you know exactly what you're doing,
==21480== or are doing some strange experiment):
==21480==   /usr/lib/valgrind/../../bin/vgdb --pid=21480 ...command...
==21480== 
==21480== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21480==   /path/to/gdb ./tests/scripts/valgrindtest
==21480== and then give GDB the following command
==21480==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21480
==21480== --pid is optional if only one valgrind process is running
==21480== 
--21480-- REDIR: 0x4019ca0 (strlen) redirected to 0x38068331 (???)
--21480-- Reading syms from /usr/lib/valgrind/vgpreload_core-amd64-linux.so
--21480--   Considering /usr/lib/valgrind/vgpreload_core-amd64-linux.so ..
--21480--   .. CRC mismatch (computed 329d6860 wanted c0186920)
--21480--    object doesn't have a symbol table
--21480-- Reading syms from /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so
--21480--   Considering /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so ..
--21480--   .. CRC mismatch (computed 1fb85af8 wanted 2e9e3c16)
--21480--    object doesn't have a symbol table
==21480== WARNING: new redirection conflicts with existing -- ignoring it
--21480--     old: 0x04019ca0 (strlen              ) R-> (0000.0) 0x38068331 ???
--21480--     new: 0x04019ca0 (strlen              ) R-> (2007.0) 0x04c2e1a0 strlen
--21480-- REDIR: 0x4019a50 (index) redirected to 0x4c2dd50 (index)
--21480-- REDIR: 0x4019c70 (strcmp) redirected to 0x4c2f2f0 (strcmp)
--21480-- REDIR: 0x401a9c0 (mempcpy) redirected to 0x4c31da0 (mempcpy)
--21480-- Reading syms from /lib/x86_64-linux-gnu/libtinfo.so.5.9
--21480--   Considering /lib/x86_64-linux-gnu/libtinfo.so.5.9 ..
--21480--   .. CRC mismatch (computed a766b3f6 wanted 5ffaddcc)
--21480--    object doesn't have a symbol table
--21480-- Reading syms from /lib/x86_64-linux-gnu/libdl-2.19.so
--21480--   Considering /lib/x86_64-linux-gnu/libdl-2.19.so ..
--21480--   .. CRC mismatch (computed c1315e8c wanted 37097b60)
--21480--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libdl-2.19.so ..
--21480--   .. CRC is valid
--21480-- Reading syms from /lib/x86_64-linux-gnu/libc-2.19.so
--21480--   Considering /lib/x86_64-linux-gnu/libc-2.19.so ..
--21480--   .. CRC mismatch (computed dc620abc wanted 148cbd6e)
--21480--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.19.so ..
--21480--   .. CRC is valid
--21480-- REDIR: 0x52f0d60 (strcasecmp) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21480-- REDIR: 0x52f3050 (strncasecmp) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21480-- REDIR: 0x52f0530 (memcpy@GLIBC_2.2.5) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21480-- REDIR: 0x52ee7c0 (rindex) redirected to 0x4c2da30 (rindex)
--21480-- REDIR: 0x52eb0b0 (__GI_strcmp) redirected to 0x4c2f200 (__GI_strcmp)
--21480-- REDIR: 0x52ecac0 (strlen) redirected to 0x4c2e0e0 (strlen)
--21480-- REDIR: 0x52ecf30 (__GI_strncmp) redirected to 0x4c2e930 (__GI_strncmp)
--21480-- REDIR: 0x52eae50 (__GI_strchr) redirected to 0x4c2db90 (__GI_strchr)
--21480-- REDIR: 0x52efc10 (memchr) redirected to 0x4c2f390 (memchr)
--21480-- REDIR: 0x52f7ac0 (strchrnul) redirected to 0x4c319b0 (strchrnul)
--21480-- REDIR: 0x52f5780 (__GI_memcpy) redirected to 0x4c2fc90 (__GI_memcpy)
--21480-- REDIR: 0x52f05c0 (memset) redirected to 0x4c31350 (memset)
--21480-- REDIR: 0x52ec500 (strcpy) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21480-- REDIR: 0x5300b90 (__strcpy_sse2_unaligned) redirected to 0x4c2e1c0 (strcpy)
--21480-- REDIR: 0x52ecee0 (strncmp) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21480-- REDIR: 0x53a5460 (__strncmp_ssse3) redirected to 0x4c2e8c0 (strncmp)
--21480-- REDIR: 0xffffffffff600400 (???) redirected to 0x3806831d (???)
--21480-- REDIR: 0x52ef410 (__GI_strstr) redirected to 0x4c32030 (__strstr_sse2)
--21480-- REDIR: 0x52f78b0 (rawmemchr) redirected to 0x4c319f0 (rawmemchr)
--21480-- REDIR: 0x52eb070 (strcmp) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21480-- REDIR: 0x53a4200 (__strcmp_ssse3) redirected to 0x4c2f1b0 (strcmp)
--21480-- REDIR: 0x52ecc80 (strnlen) redirected to 0x4c2e080 (strnlen)
--21480-- REDIR: 0x536cd00 (__strcpy_chk) redirected to 0x4c31a30 (__strcpy_chk)
--21480-- REDIR: 0x52eae20 (index) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21480-- REDIR: 0xffffffffff600000 (???) redirected to 0x38068313 (???)
--21480-- REDIR: 0x52f5730 (memcpy@@GLIBC_2.14) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21480-- REDIR: 0x52fbfd0 (__memcpy_sse2_unaligned) redirected to 0x4c2f6b0 (memcpy@@GLIBC_2.14)
==21481== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21481-by-mandiow-on-???
==21481== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21481-by-mandiow-on-???
==21481== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21481-by-mandiow-on-???
==21481== 
==21481== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21481== don't want to do, unless you know exactly what you're doing,
==21481== or are doing some strange experiment):
==21481==   /usr/lib/valgrind/../../bin/vgdb --pid=21481 ...command...
==21481== 
==21481== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21481==   /path/to/gdb ./tests/scripts/valgrindtest
==21481== and then give GDB the following command
==21481==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21481
==21481== --pid is optional if only one valgrind process is running
==21481== 
==21481== 
==21481== HEAP SUMMARY:
==21481==     in use at exit: 0 bytes in 0 blocks
==21481==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==21481== 
==21481== All heap blocks were freed -- no leaks are possible
==21481== 
==21481== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21481== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21483== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21483-by-mandiow-on-???
==21483== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21483-by-mandiow-on-???
==21483== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21483-by-mandiow-on-???
==21483== 
==21483== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21483== don't want to do, unless you know exactly what you're doing,
==21483== or are doing some strange experiment):
==21483==   /usr/lib/valgrind/../../bin/vgdb --pid=21483 ...command...
==21483== 
==21483== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21483==   /path/to/gdb ./tests/scripts/valgrindtest
==21483== and then give GDB the following command
==21483==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21483
==21483== --pid is optional if only one valgrind process is running
==21483== 
==21484== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21484-by-mandiow-on-???
==21484== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21484-by-mandiow-on-???
==21484== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21484-by-mandiow-on-???
==21484== 
==21484== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21484== don't want to do, unless you know exactly what you're doing,
==21484== or are doing some strange experiment):
==21484==   /usr/lib/valgrind/../../bin/vgdb --pid=21484 ...command...
==21484== 
==21484== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21484==   /path/to/gdb ./tests/scripts/valgrindtest
==21484== and then give GDB the following command
==21484==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21484
==21484== --pid is optional if only one valgrind process is running
==21484== 
==21483== 
==21483== HEAP SUMMARY:
==21483==     in use at exit: 0 bytes in 0 blocks
==21483==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==21483== 
==21483== All heap blocks were freed -- no leaks are possible
==21483== 
==21483== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21483== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21486== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21486-by-mandiow-on-???
==21486== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21486-by-mandiow-on-???
==21486== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21486-by-mandiow-on-???
==21486== 
==21486== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21486== don't want to do, unless you know exactly what you're doing,
==21486== or are doing some strange experiment):
==21486==   /usr/lib/valgrind/../../bin/vgdb --pid=21486 ...command...
==21486== 
==21486== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21486==   /path/to/gdb ./tests/scripts/valgrindtest
==21486== and then give GDB the following command
==21486==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21486
==21486== --pid is optional if only one valgrind process is running
==21486== 
==21487== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21487-by-mandiow-on-???
==21487== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21487-by-mandiow-on-???
==21487== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21487-by-mandiow-on-???
==21487== 
==21487== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21487== don't want to do, unless you know exactly what you're doing,
==21487== or are doing some strange experiment):
==21487==   /usr/lib/valgrind/../../bin/vgdb --pid=21487 ...command...
==21487== 
==21487== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21487==   /path/to/gdb ./tests/scripts/valgrindtest
==21487== and then give GDB the following command
==21487==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21487
==21487== --pid is optional if only one valgrind process is running
==21487== 
==21486== 
==21486== HEAP SUMMARY:
==21486==     in use at exit: 0 bytes in 0 blocks
==21486==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==21486== 
==21486== All heap blocks were freed -- no leaks are possible
==21486== 
==21486== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21486== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21489== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21489-by-mandiow-on-???
==21489== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21489-by-mandiow-on-???
==21489== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21489-by-mandiow-on-???
==21489== 
==21489== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21489== don't want to do, unless you know exactly what you're doing,
==21489== or are doing some strange experiment):
==21489==   /usr/lib/valgrind/../../bin/vgdb --pid=21489 ...command...
==21489== 
==21489== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21489==   /path/to/gdb ./tests/scripts/valgrindtest
==21489== and then give GDB the following command
==21489==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21489
==21489== --pid is optional if only one valgrind process is running
==21489== 
==21490== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21490-by-mandiow-on-???
==21490== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21490-by-mandiow-on-???
==21490== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21490-by-mandiow-on-???
==21490== 
==21490== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21490== don't want to do, unless you know exactly what you're doing,
==21490== or are doing some strange experiment):
==21490==   /usr/lib/valgrind/../../bin/vgdb --pid=21490 ...command...
==21490== 
==21490== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21490==   /path/to/gdb ./tests/scripts/valgrindtest
==21490== and then give GDB the following command
==21490==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21490
==21490== --pid is optional if only one valgrind process is running
==21490== 
==21489== 
==21489== HEAP SUMMARY:
==21489==     in use at exit: 0 bytes in 0 blocks
==21489==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==21489== 
==21489== All heap blocks were freed -- no leaks are possible
==21489== 
==21489== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21489== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21492== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21492-by-mandiow-on-???
==21492== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21492-by-mandiow-on-???
==21492== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21492-by-mandiow-on-???
==21492== 
==21492== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21492== don't want to do, unless you know exactly what you're doing,
==21492== or are doing some strange experiment):
==21492==   /usr/lib/valgrind/../../bin/vgdb --pid=21492 ...command...
==21492== 
==21492== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21492==   /path/to/gdb ./tests/scripts/valgrindtest
==21492== and then give GDB the following command
==21492==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21492
==21492== --pid is optional if only one valgrind process is running
==21492== 
--21494-- REDIR: 0x52ee780 (strncpy) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--21494-- REDIR: 0x53011c0 (__strncpy_sse2_unaligned) redirected to 0x4c2e770 (__strncpy_sse2_unaligned)
==21493== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21493-by-mandiow-on-???
==21493== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21493-by-mandiow-on-???
==21493== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21493-by-mandiow-on-???
==21493== 
==21493== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21493== don't want to do, unless you know exactly what you're doing,
==21493== or are doing some strange experiment):
==21493==   /usr/lib/valgrind/../../bin/vgdb --pid=21493 ...command...
==21493== 
==21493== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21493==   /path/to/gdb ./tests/scripts/valgrindtest
==21493== and then give GDB the following command
==21493==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21493
==21493== --pid is optional if only one valgrind process is running
==21493== 
==21492== 
==21492== HEAP SUMMARY:
==21492==     in use at exit: 0 bytes in 0 blocks
==21492==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==21492== 
==21492== All heap blocks were freed -- no leaks are possible
==21492== 
==21492== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21492== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21496== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21496-by-mandiow-on-???
==21496== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21496-by-mandiow-on-???
==21496== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21496-by-mandiow-on-???
==21496== 
==21496== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21496== don't want to do, unless you know exactly what you're doing,
==21496== or are doing some strange experiment):
==21496==   /usr/lib/valgrind/../../bin/vgdb --pid=21496 ...command...
==21496== 
==21496== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21496==   /path/to/gdb ./tests/scripts/valgrindtest
==21496== and then give GDB the following command
==21496==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21496
==21496== --pid is optional if only one valgrind process is running
==21496== 
==21480== 
==21480== HEAP SUMMARY:
==21480==     in use at exit: 0 bytes in 0 blocks
==21480==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==21480== 
==21480== All heap blocks were freed -- no leaks are possible
==21480== 
==21480== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21480== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
