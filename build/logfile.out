==31667== Memcheck, a memory error detector
==31667== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==31667== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==31667== Command: ./tests/scripts/valgrindtest ./main ./tests/e3/input/i06.iks
==31667== Parent PID: 3257
==31667== 
--31667-- 
--31667-- Valgrind options:
--31667--    --leak-check=full
--31667--    --log-file=logfile.out
--31667--    -v
--31667-- Contents of /proc/version:
--31667--   Linux version 3.13.0-24-generic (buildd@batsu) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #47-Ubuntu SMP Fri May 2 23:30:00 UTC 2014
--31667-- Arch and hwcaps: AMD64, amd64-cx16-rdtscp-sse3-avx
--31667-- Page sizes: currently 4096, max supported 4096
--31667-- Valgrind library directory: /usr/lib/valgrind
--31667-- Reading syms from /bin/bash
--31667--   Considering /bin/bash ..
--31667--   .. CRC mismatch (computed 594e4450 wanted 0d1272a8)
--31667--    object doesn't have a symbol table
--31667-- Reading syms from /lib/x86_64-linux-gnu/ld-2.19.so
--31667--   Considering /lib/x86_64-linux-gnu/ld-2.19.so ..
--31667--   .. CRC mismatch (computed 4cbae35e wanted 8d683c31)
--31667--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/ld-2.19.so ..
--31667--   .. CRC is valid
--31667-- Reading syms from /usr/lib/valgrind/memcheck-amd64-linux
--31667--   Considering /usr/lib/valgrind/memcheck-amd64-linux ..
--31667--   .. CRC mismatch (computed 37cdde19 wanted adc367dd)
--31667--    object doesn't have a symbol table
--31667--    object doesn't have a dynamic symbol table
--31667-- Scheduler: using generic scheduler lock implementation.
--31667-- Reading suppressions file: /usr/lib/valgrind/default.supp
==31667== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31667-by-mandiow-on-???
==31667== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31667-by-mandiow-on-???
==31667== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31667-by-mandiow-on-???
==31667== 
==31667== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31667== don't want to do, unless you know exactly what you're doing,
==31667== or are doing some strange experiment):
==31667==   /usr/lib/valgrind/../../bin/vgdb --pid=31667 ...command...
==31667== 
==31667== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31667==   /path/to/gdb ./tests/scripts/valgrindtest
==31667== and then give GDB the following command
==31667==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31667
==31667== --pid is optional if only one valgrind process is running
==31667== 
--31667-- REDIR: 0x4019ca0 (strlen) redirected to 0x38068331 (???)
--31667-- Reading syms from /usr/lib/valgrind/vgpreload_core-amd64-linux.so
--31667--   Considering /usr/lib/valgrind/vgpreload_core-amd64-linux.so ..
--31667--   .. CRC mismatch (computed 329d6860 wanted c0186920)
--31667--    object doesn't have a symbol table
--31667-- Reading syms from /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so
--31667--   Considering /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so ..
--31667--   .. CRC mismatch (computed 1fb85af8 wanted 2e9e3c16)
--31667--    object doesn't have a symbol table
==31667== WARNING: new redirection conflicts with existing -- ignoring it
--31667--     old: 0x04019ca0 (strlen              ) R-> (0000.0) 0x38068331 ???
--31667--     new: 0x04019ca0 (strlen              ) R-> (2007.0) 0x04c2e1a0 strlen
--31667-- REDIR: 0x4019a50 (index) redirected to 0x4c2dd50 (index)
--31667-- REDIR: 0x4019c70 (strcmp) redirected to 0x4c2f2f0 (strcmp)
--31667-- REDIR: 0x401a9c0 (mempcpy) redirected to 0x4c31da0 (mempcpy)
--31667-- Reading syms from /lib/x86_64-linux-gnu/libtinfo.so.5.9
--31667--   Considering /lib/x86_64-linux-gnu/libtinfo.so.5.9 ..
--31667--   .. CRC mismatch (computed a766b3f6 wanted 5ffaddcc)
--31667--    object doesn't have a symbol table
--31667-- Reading syms from /lib/x86_64-linux-gnu/libdl-2.19.so
--31667--   Considering /lib/x86_64-linux-gnu/libdl-2.19.so ..
--31667--   .. CRC mismatch (computed c1315e8c wanted 37097b60)
--31667--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libdl-2.19.so ..
--31667--   .. CRC is valid
--31667-- Reading syms from /lib/x86_64-linux-gnu/libc-2.19.so
--31667--   Considering /lib/x86_64-linux-gnu/libc-2.19.so ..
--31667--   .. CRC mismatch (computed dc620abc wanted 148cbd6e)
--31667--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.19.so ..
--31667--   .. CRC is valid
--31667-- REDIR: 0x52f0d60 (strcasecmp) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31667-- REDIR: 0x52f3050 (strncasecmp) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31667-- REDIR: 0x52f0530 (memcpy@GLIBC_2.2.5) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31667-- REDIR: 0x52ee7c0 (rindex) redirected to 0x4c2da30 (rindex)
--31667-- REDIR: 0x52eb0b0 (__GI_strcmp) redirected to 0x4c2f200 (__GI_strcmp)
--31667-- REDIR: 0x52ecac0 (strlen) redirected to 0x4c2e0e0 (strlen)
--31667-- REDIR: 0x52ecf30 (__GI_strncmp) redirected to 0x4c2e930 (__GI_strncmp)
--31667-- REDIR: 0x52eae50 (__GI_strchr) redirected to 0x4c2db90 (__GI_strchr)
--31667-- REDIR: 0x52efc10 (memchr) redirected to 0x4c2f390 (memchr)
--31667-- REDIR: 0x52f7ac0 (strchrnul) redirected to 0x4c319b0 (strchrnul)
--31667-- REDIR: 0x52f5780 (__GI_memcpy) redirected to 0x4c2fc90 (__GI_memcpy)
--31667-- REDIR: 0x52f05c0 (memset) redirected to 0x4c31350 (memset)
--31667-- REDIR: 0x52ec500 (strcpy) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31667-- REDIR: 0x5300b90 (__strcpy_sse2_unaligned) redirected to 0x4c2e1c0 (strcpy)
--31667-- REDIR: 0x52ecee0 (strncmp) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31667-- REDIR: 0x53a5460 (__strncmp_ssse3) redirected to 0x4c2e8c0 (strncmp)
--31667-- REDIR: 0xffffffffff600400 (???) redirected to 0x3806831d (???)
--31667-- REDIR: 0x52ef410 (__GI_strstr) redirected to 0x4c32030 (__strstr_sse2)
--31667-- REDIR: 0x52f78b0 (rawmemchr) redirected to 0x4c319f0 (rawmemchr)
--31667-- REDIR: 0x52eb070 (strcmp) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31667-- REDIR: 0x53a4200 (__strcmp_ssse3) redirected to 0x4c2f1b0 (strcmp)
--31667-- REDIR: 0x52ecc80 (strnlen) redirected to 0x4c2e080 (strnlen)
--31667-- REDIR: 0x536cd00 (__strcpy_chk) redirected to 0x4c31a30 (__strcpy_chk)
--31667-- REDIR: 0x52eae20 (index) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31667-- REDIR: 0xffffffffff600000 (???) redirected to 0x38068313 (???)
--31667-- REDIR: 0x52f5730 (memcpy@@GLIBC_2.14) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31667-- REDIR: 0x52fbfd0 (__memcpy_sse2_unaligned) redirected to 0x4c2f6b0 (memcpy@@GLIBC_2.14)
==31668== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31668-by-mandiow-on-???
==31668== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31668-by-mandiow-on-???
==31668== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31668-by-mandiow-on-???
==31668== 
==31668== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31668== don't want to do, unless you know exactly what you're doing,
==31668== or are doing some strange experiment):
==31668==   /usr/lib/valgrind/../../bin/vgdb --pid=31668 ...command...
==31668== 
==31668== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31668==   /path/to/gdb ./tests/scripts/valgrindtest
==31668== and then give GDB the following command
==31668==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31668
==31668== --pid is optional if only one valgrind process is running
==31668== 
==31668== 
==31668== HEAP SUMMARY:
==31668==     in use at exit: 0 bytes in 0 blocks
==31668==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==31668== 
==31668== All heap blocks were freed -- no leaks are possible
==31668== 
==31668== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31668== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31671== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31671-by-mandiow-on-???
==31671== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31671-by-mandiow-on-???
==31671== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31671-by-mandiow-on-???
==31671== 
==31671== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31671== don't want to do, unless you know exactly what you're doing,
==31671== or are doing some strange experiment):
==31671==   /usr/lib/valgrind/../../bin/vgdb --pid=31671 ...command...
==31671== 
==31671== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31671==   /path/to/gdb ./tests/scripts/valgrindtest
==31671== and then give GDB the following command
==31671==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31671
==31671== --pid is optional if only one valgrind process is running
==31671== 
==31670== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31670-by-mandiow-on-???
==31670== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31670-by-mandiow-on-???
==31670== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31670-by-mandiow-on-???
==31670== 
==31670== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31670== don't want to do, unless you know exactly what you're doing,
==31670== or are doing some strange experiment):
==31670==   /usr/lib/valgrind/../../bin/vgdb --pid=31670 ...command...
==31670== 
==31670== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31670==   /path/to/gdb ./tests/scripts/valgrindtest
==31670== and then give GDB the following command
==31670==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31670
==31670== --pid is optional if only one valgrind process is running
==31670== 
==31670== 
==31670== HEAP SUMMARY:
==31670==     in use at exit: 0 bytes in 0 blocks
==31670==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==31670== 
==31670== All heap blocks were freed -- no leaks are possible
==31670== 
==31670== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31670== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31674== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31674-by-mandiow-on-???
==31674== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31674-by-mandiow-on-???
==31674== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31674-by-mandiow-on-???
==31674== 
==31674== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31674== don't want to do, unless you know exactly what you're doing,
==31674== or are doing some strange experiment):
==31674==   /usr/lib/valgrind/../../bin/vgdb --pid=31674 ...command...
==31674== 
==31674== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31674==   /path/to/gdb ./tests/scripts/valgrindtest
==31674== and then give GDB the following command
==31674==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31674
==31674== --pid is optional if only one valgrind process is running
==31674== 
==31675== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31675-by-mandiow-on-???
==31675== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31675-by-mandiow-on-???
==31675== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31675-by-mandiow-on-???
==31675== 
==31675== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31675== don't want to do, unless you know exactly what you're doing,
==31675== or are doing some strange experiment):
==31675==   /usr/lib/valgrind/../../bin/vgdb --pid=31675 ...command...
==31675== 
==31675== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31675==   /path/to/gdb ./tests/scripts/valgrindtest
==31675== and then give GDB the following command
==31675==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31675
==31675== --pid is optional if only one valgrind process is running
==31675== 
==31673== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31673-by-mandiow-on-???
==31673== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31673-by-mandiow-on-???
==31673== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31673-by-mandiow-on-???
==31673== 
==31673== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31673== don't want to do, unless you know exactly what you're doing,
==31673== or are doing some strange experiment):
==31673==   /usr/lib/valgrind/../../bin/vgdb --pid=31673 ...command...
==31673== 
==31673== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31673==   /path/to/gdb ./tests/scripts/valgrindtest
==31673== and then give GDB the following command
==31673==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31673
==31673== --pid is optional if only one valgrind process is running
==31673== 
==31673== 
==31673== HEAP SUMMARY:
==31673==     in use at exit: 0 bytes in 0 blocks
==31673==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==31673== 
==31673== All heap blocks were freed -- no leaks are possible
==31673== 
==31673== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31673== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31676== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31676-by-mandiow-on-???
==31676== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31676-by-mandiow-on-???
==31676== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31676-by-mandiow-on-???
==31676== 
==31676== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31676== don't want to do, unless you know exactly what you're doing,
==31676== or are doing some strange experiment):
==31676==   /usr/lib/valgrind/../../bin/vgdb --pid=31676 ...command...
==31676== 
==31676== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31676==   /path/to/gdb ./tests/scripts/valgrindtest
==31676== and then give GDB the following command
==31676==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31676
==31676== --pid is optional if only one valgrind process is running
==31676== 
==31677== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31677-by-mandiow-on-???
==31677== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31677-by-mandiow-on-???
==31677== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31677-by-mandiow-on-???
==31677== 
==31677== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31677== don't want to do, unless you know exactly what you're doing,
==31677== or are doing some strange experiment):
==31677==   /usr/lib/valgrind/../../bin/vgdb --pid=31677 ...command...
==31677== 
==31677== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31677==   /path/to/gdb ./tests/scripts/valgrindtest
==31677== and then give GDB the following command
==31677==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31677
==31677== --pid is optional if only one valgrind process is running
==31677== 
==31676== 
==31676== HEAP SUMMARY:
==31676==     in use at exit: 0 bytes in 0 blocks
==31676==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==31676== 
==31676== All heap blocks were freed -- no leaks are possible
==31676== 
==31676== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31676== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31679== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31679-by-mandiow-on-???
==31679== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31679-by-mandiow-on-???
==31679== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31679-by-mandiow-on-???
==31679== 
==31679== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31679== don't want to do, unless you know exactly what you're doing,
==31679== or are doing some strange experiment):
==31679==   /usr/lib/valgrind/../../bin/vgdb --pid=31679 ...command...
==31679== 
==31679== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31679==   /path/to/gdb ./tests/scripts/valgrindtest
==31679== and then give GDB the following command
==31679==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31679
==31679== --pid is optional if only one valgrind process is running
==31679== 
==31680== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31680-by-mandiow-on-???
==31680== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31680-by-mandiow-on-???
==31680== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31680-by-mandiow-on-???
==31680== 
==31680== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31680== don't want to do, unless you know exactly what you're doing,
==31680== or are doing some strange experiment):
==31680==   /usr/lib/valgrind/../../bin/vgdb --pid=31680 ...command...
==31680== 
==31680== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31680==   /path/to/gdb ./tests/scripts/valgrindtest
==31680== and then give GDB the following command
==31680==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31680
==31680== --pid is optional if only one valgrind process is running
==31680== 
==31681== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31681-by-mandiow-on-???
==31681== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31681-by-mandiow-on-???
==31681== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31681-by-mandiow-on-???
==31681== 
==31681== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31681== don't want to do, unless you know exactly what you're doing,
==31681== or are doing some strange experiment):
==31681==   /usr/lib/valgrind/../../bin/vgdb --pid=31681 ...command...
==31681== 
==31681== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31681==   /path/to/gdb ./tests/scripts/valgrindtest
==31681== and then give GDB the following command
==31681==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31681
==31681== --pid is optional if only one valgrind process is running
==31681== 
--31681-- REDIR: 0x52ee780 (strncpy) redirected to 0x4a25720 (_vgnU_ifunc_wrapper)
--31681-- REDIR: 0x53011c0 (__strncpy_sse2_unaligned) redirected to 0x4c2e770 (__strncpy_sse2_unaligned)
==31679== 
==31679== HEAP SUMMARY:
==31679==     in use at exit: 0 bytes in 0 blocks
==31679==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==31679== 
==31679== All heap blocks were freed -- no leaks are possible
==31679== 
==31679== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31679== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31683== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31683-by-mandiow-on-???
==31683== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31683-by-mandiow-on-???
==31683== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31683-by-mandiow-on-???
==31683== 
==31683== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31683== don't want to do, unless you know exactly what you're doing,
==31683== or are doing some strange experiment):
==31683==   /usr/lib/valgrind/../../bin/vgdb --pid=31683 ...command...
==31683== 
==31683== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31683==   /path/to/gdb ./tests/scripts/valgrindtest
==31683== and then give GDB the following command
==31683==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=31683
==31683== --pid is optional if only one valgrind process is running
==31683== 
==31667== 
==31667== HEAP SUMMARY:
==31667==     in use at exit: 0 bytes in 0 blocks
==31667==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==31667== 
==31667== All heap blocks were freed -- no leaks are possible
==31667== 
==31667== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==31667== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
